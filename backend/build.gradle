buildscript {
    ext {
        // https://mvnrepository.com/artifact/com.google.protobuf/protoc
        protobufVersion = '3.21.12'
        // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-gradle-plugin
        protobufPluginVersion = '0.9.2'
        // https://mvnrepository.com/artifact/io.grpc/grpc-bom
        grpcVersion = '1.52.1'
        // https://github.com/yidongnan/grpc-spring-boot-starter/blob/master/build.gradle
        grpcClientServer = '2.15.0-SNAPSHOT'
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
        springBootVersion = '2.7.8'
        // https://mvnrepository.com/artifact/org.mapstruct/mapstruct
        mapstructVersion = '1.5.3.Final'
        lombokPluginVersion = '6.6.1'
        versionsPluginVersion = '0.44.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:${protobufPluginVersion}"
    }
}
plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.0'
    // id 'com.google.protobuf' version "${protobufPluginVersion}"
    id 'io.freefair.lombok' version "${lombokPluginVersion}" apply false
    id 'com.github.ben-manes.versions' version "${versionsPluginVersion}"
}

// you may use IntelliJ's project configuration to make it use the gradle version defined in the gradle script's wrapper section
wrapper {
    // Update using:
    // ./gradlew wrapper --gradle-version=7.5.1 --distribution-type=bin
    gradleVersion = '7.6'
}

/*
def buildTimeAndDate = OffsetDateTime.now()

ext {
    buildDate = DateTimeFormatter.ISO_LOCAL_DATE.format(buildTimeAndDate)
    buildTime = DateTimeFormatter.ofPattern('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    buildRevision = versioning.info.commit
}
//*/

group = 'cl.ucn.fondef.sata'
version = '3.0.12'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring boot stuff
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
    // implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    // implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    // implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // implementation 'org.springframework.session:spring-session-jdbc'

    // Lombok!
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring dev stuff
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Google protocol buffers + gRPC
    // implementation "io.grpc:grpc-bom:${grpcVersion}"
    // implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    // gRPC: Server + Client
    // implementation "net.devh:grpc-server-spring-boot-starter:${grpcClientServer}"
    // implementation "net.devh:grpc-client-spring-boot-starter:${grpcClientServer}"

    // Database drivers
    runtimeOnly 'com.h2database:h2'
    // runtimeOnly 'mysql:mysql-connector-java'
    // runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    // SQLite SQL
    runtimeOnly 'org.xerial:sqlite-jdbc:3.40.0.0'
    runtimeOnly 'com.github.gwenn:sqlite-dialect:0.1.2'

    // Crypto library
    implementation 'org.springframework.security:spring-security-crypto:6.0.1'
    runtimeOnly 'org.bouncycastle:bcprov-jdk15on:1.70'
    runtimeOnly 'org.springframework:spring-jcl:6.0.4'

    // Commons Lang
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // Logger
    implementation 'org.slf4j:slf4j-api:1.7.36'
    // implementation 'ch.qos.logback:logback-core:1.4.1'
    // implementation 'ch.qos.logback:logback-classic:1.4.1'
    implementation 'org.fusesource.jansi:jansi:2.4.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.10.1'

    // Mapper
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    // annotationProcessor 'no.entur.mapstruct.spi:protobuf-spi-impl:1.41'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // testImplementation 'org.springframework.security:spring-security-test'
    // testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    // testImplementation 'com.asarkar.grpc:grpc-test:1.2.2'
    // Lombok
    testImplementation 'org.slf4j:slf4j-api:1.7.36'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

}

// Protobuf configuration
/*
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}
//*/

// Inform IntelliJ  about the generated code.
idea {
    module {
        sourceDirs += file("src/generated/main/java")
        sourceDirs += file("src/generated/main/grpc")
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

/*
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}
*/

allprojects {
    // Build all the project in the temporal directory
    // buildDir = "${System.env.TEMP}\\gradle\\${project.name}"
}
